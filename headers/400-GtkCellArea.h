extern gboolean gtk_cell_area_activate_cell ( GtkCellArea* area, GtkWidget* widget, GtkCellRenderer* renderer, GdkEvent* event, const GdkRectangle* cell_area, GtkCellRendererState flags );
extern void gtk_cell_area_add ( GtkCellArea* area, GtkCellRenderer* renderer );
extern void gtk_cell_area_apply_attributes ( GtkCellArea* area, GtkTreeModel* tree_model, GtkTreeIter* iter, gboolean is_expander, gboolean is_expanded );
extern void gtk_cell_area_attribute_connect ( GtkCellArea* area, GtkCellRenderer* renderer, const char* attribute, int column );
extern gboolean gtk_cell_area_activate ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const GdkRectangle* cell_area, GtkCellRendererState flags, gboolean edit_only );
extern void gtk_cell_area_add_with_properties ( GtkCellArea* area, GtkCellRenderer* renderer, const char* first_prop_name, ... );
extern void gtk_cell_area_add_focus_sibling ( GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling );
extern void gtk_cell_area_attribute_disconnect ( GtkCellArea* area, GtkCellRenderer* renderer, const char* attribute );
extern int gtk_cell_area_attribute_get_column ( GtkCellArea* area, GtkCellRenderer* renderer, const char* attribute );
extern void gtk_cell_area_cell_get_valist ( GtkCellArea* area, GtkCellRenderer* renderer, const char* first_property_name, va_list var_args );
extern void gtk_cell_area_cell_get ( GtkCellArea* area, GtkCellRenderer* renderer, const char* first_prop_name, ... );
extern void gtk_cell_area_cell_get_property ( GtkCellArea* area, GtkCellRenderer* renderer, const char* property_name, GValue* value );
extern void gtk_cell_area_cell_set_property ( GtkCellArea* area, GtkCellRenderer* renderer, const char* property_name, const GValue* value );
extern void gtk_cell_area_cell_set_valist ( GtkCellArea* area, GtkCellRenderer* renderer, const char* first_property_name, va_list var_args );
extern void gtk_cell_area_cell_set ( GtkCellArea* area, GtkCellRenderer* renderer, const char* first_prop_name, ... );
extern GtkCellAreaContext* gtk_cell_area_copy_context ( GtkCellArea* area, GtkCellAreaContext* context );
extern GtkCellAreaContext* gtk_cell_area_create_context ( GtkCellArea* area );
extern void gtk_cell_area_foreach_alloc ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const GdkRectangle* cell_area, const GdkRectangle* background_area, GtkCellAllocCallback callback, gpointer callback_data );
extern gboolean gtk_cell_area_focus ( GtkCellArea* area, GtkDirectionType direction );
extern void gtk_cell_area_foreach ( GtkCellArea* area, GtkCellCallback callback, gpointer callback_data );
extern int gtk_cell_area_event ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkEvent* event, const GdkRectangle* cell_area, GtkCellRendererState flags );
extern void gtk_cell_area_get_cell_allocation ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GtkCellRenderer* renderer, const GdkRectangle* cell_area, GdkRectangle* allocation );
extern GtkCellEditable* gtk_cell_area_get_edit_widget ( GtkCellArea* area );
extern GtkCellRenderer* gtk_cell_area_get_cell_at_position ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, const GdkRectangle* cell_area, int x, int y, GdkRectangle* alloc_area );
extern GtkCellRenderer* gtk_cell_area_get_edited_cell ( GtkCellArea* area );
extern GtkCellRenderer* gtk_cell_area_get_focus_from_sibling ( GtkCellArea* area, GtkCellRenderer* renderer );
extern const char* gtk_cell_area_get_current_path_string ( GtkCellArea* area );
extern GtkCellRenderer* gtk_cell_area_get_focus_cell ( GtkCellArea* area );
extern void gtk_cell_area_get_preferred_height ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int* minimum_height, int* natural_height );
extern const GList* gtk_cell_area_get_focus_siblings ( GtkCellArea* area, GtkCellRenderer* renderer );
extern void gtk_cell_area_get_preferred_width ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int* minimum_width, int* natural_width );
extern void gtk_cell_area_get_preferred_width_for_height ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int height, int* minimum_width, int* natural_width );
extern void gtk_cell_area_get_preferred_height_for_width ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int width, int* minimum_height, int* natural_height );
extern GtkSizeRequestMode gtk_cell_area_get_request_mode ( GtkCellArea* area );
extern gboolean gtk_cell_area_has_renderer ( GtkCellArea* area, GtkCellRenderer* renderer );
extern gboolean gtk_cell_area_is_activatable ( GtkCellArea* area );
extern gboolean gtk_cell_area_is_focus_sibling ( GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling );
extern void gtk_cell_area_remove ( GtkCellArea* area, GtkCellRenderer* renderer );
extern void gtk_cell_area_inner_cell_area ( GtkCellArea* area, GtkWidget* widget, const GdkRectangle* cell_area, GdkRectangle* inner_area );
extern void gtk_cell_area_set_focus_cell ( GtkCellArea* area, GtkCellRenderer* renderer );
extern void gtk_cell_area_remove_focus_sibling ( GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling );
extern void gtk_cell_area_request_renderer ( GtkCellArea* area, GtkCellRenderer* renderer, GtkOrientation orientation, GtkWidget* widget, int for_size, int* minimum_size, int* natural_size );
extern void gtk_cell_area_class_install_cell_property ( GtkCellAreaClass* aclass, guint property_id, GParamSpec* pspec );
extern GParamSpec** gtk_cell_area_class_list_cell_properties ( GtkCellAreaClass* aclass, guint* n_properties );
extern GParamSpec* gtk_cell_area_class_find_cell_property ( GtkCellAreaClass* aclass, const char* property_name );
extern void gtk_cell_area_stop_editing ( GtkCellArea* area, gboolean canceled );
extern void gtk_cell_area_snapshot ( GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GtkSnapshot* snapshot, const GdkRectangle* background_area, const GdkRectangle* cell_area, GtkCellRendererState flags, gboolean paint_focus );
extern void remove ( GtkCellArea* area, GtkCellRenderer* renderer );
