extern void gtk_widget_action_set_enabled ( GtkWidget* widget, const char* action_name, gboolean enabled );
extern gboolean gtk_widget_activate ( GtkWidget* widget );
extern gboolean gtk_widget_activate_action ( GtkWidget* widget, const char* name, const char* format_string, ... );
extern gboolean gtk_widget_activate_action_variant ( GtkWidget* widget, const char* name, GVariant* args );
extern void gtk_widget_activate_default ( GtkWidget* widget );
extern void gtk_widget_add_controller ( GtkWidget* widget, GtkEventController* controller );
extern void gtk_widget_add_css_class ( GtkWidget* widget, const char* css_class );
extern void gtk_widget_add_mnemonic_label ( GtkWidget* widget, GtkWidget* label );
extern guint gtk_widget_add_tick_callback ( GtkWidget* widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify );
extern void gtk_widget_allocate ( GtkWidget* widget, int width, int height, int baseline, GskTransform* transform );
extern gboolean gtk_widget_child_focus ( GtkWidget* widget, GtkDirectionType direction );
extern gboolean gtk_widget_compute_expand ( GtkWidget* widget, GtkOrientation orientation );
extern gboolean gtk_widget_contains ( GtkWidget* widget, double x, double y );
extern PangoContext* gtk_widget_create_pango_context ( GtkWidget* widget );
extern PangoLayout* gtk_widget_create_pango_layout ( GtkWidget* widget, const char* text );
extern gboolean gtk_drag_check_threshold ( GtkWidget* widget, int start_x, int start_y, int current_x, int current_y );
extern void gtk_widget_error_bell ( GtkWidget* widget );
extern int gtk_widget_get_allocated_baseline ( GtkWidget* widget );
extern int gtk_widget_get_allocated_height ( GtkWidget* widget );
extern int gtk_widget_get_allocated_width ( GtkWidget* widget );
extern void gtk_widget_get_allocation ( GtkWidget* widget, GtkAllocation* allocation );
extern GtkWidget* gtk_widget_get_ancestor ( GtkWidget* widget, GType widget_type );
extern gboolean gtk_widget_get_can_focus ( GtkWidget* widget );
extern gboolean gtk_widget_get_can_target ( GtkWidget* widget );
extern gboolean gtk_widget_get_child_visible ( GtkWidget* widget );
extern GdkClipboard* gtk_widget_get_clipboard ( GtkWidget* widget );
extern char** gtk_widget_get_css_classes ( GtkWidget* widget );
extern const char* gtk_widget_get_css_name ( GtkWidget* self );
extern GdkCursor* gtk_widget_get_cursor ( GtkWidget* widget );
extern GtkTextDirection gtk_widget_get_direction ( GtkWidget* widget );
extern GdkDisplay* gtk_widget_get_display ( GtkWidget* widget );
extern GtkWidget* gtk_widget_get_first_child ( GtkWidget* widget );
extern GtkWidget* gtk_widget_get_focus_child ( GtkWidget* widget );
extern gboolean gtk_widget_get_focus_on_click ( GtkWidget* widget );
extern gboolean gtk_widget_get_focusable ( GtkWidget* widget );
extern PangoFontMap* gtk_widget_get_font_map ( GtkWidget* widget );
extern GdkFrameClock* gtk_widget_get_frame_clock ( GtkWidget* widget );
extern GtkAlign gtk_widget_get_halign ( GtkWidget* widget );
extern gboolean gtk_widget_get_has_tooltip ( GtkWidget* widget );
extern int gtk_widget_get_height ( GtkWidget* widget );
extern gboolean gtk_widget_get_hexpand ( GtkWidget* widget );
extern gboolean gtk_widget_get_hexpand_set ( GtkWidget* widget );
extern GtkWidget* gtk_widget_get_last_child ( GtkWidget* widget );
extern GtkLayoutManager* gtk_widget_get_layout_manager ( GtkWidget* widget );
extern gboolean gtk_widget_get_mapped ( GtkWidget* widget );
extern int gtk_widget_get_margin_bottom ( GtkWidget* widget );
extern int gtk_widget_get_margin_end ( GtkWidget* widget );
extern int gtk_widget_get_margin_start ( GtkWidget* widget );
extern int gtk_widget_get_margin_top ( GtkWidget* widget );
extern const char* gtk_widget_get_name ( GtkWidget* widget );
extern GtkNative* gtk_widget_get_native ( GtkWidget* widget );
extern GtkWidget* gtk_widget_get_next_sibling ( GtkWidget* widget );
extern double gtk_widget_get_opacity ( GtkWidget* widget );
extern GtkOverflow gtk_widget_get_overflow ( GtkWidget* widget );
extern PangoContext* gtk_widget_get_pango_context ( GtkWidget* widget );
extern GtkWidget* gtk_widget_get_parent ( GtkWidget* widget );
extern void gtk_widget_get_preferred_size ( GtkWidget* widget, GtkRequisition* minimum_size, GtkRequisition* natural_size );
extern GtkWidget* gtk_widget_get_prev_sibling ( GtkWidget* widget );
extern GdkClipboard* gtk_widget_get_primary_clipboard ( GtkWidget* widget );
extern gboolean gtk_widget_get_realized ( GtkWidget* widget );
extern gboolean gtk_widget_get_receives_default ( GtkWidget* widget );
extern GtkSizeRequestMode gtk_widget_get_request_mode ( GtkWidget* widget );
extern GtkRoot* gtk_widget_get_root ( GtkWidget* widget );
extern int gtk_widget_get_scale_factor ( GtkWidget* widget );
extern gboolean gtk_widget_get_sensitive ( GtkWidget* widget );
extern GtkSettings* gtk_widget_get_settings ( GtkWidget* widget );
extern int gtk_widget_get_size ( GtkWidget* widget, GtkOrientation orientation );
extern void gtk_widget_get_size_request ( GtkWidget* widget, int* width, int* height );
extern GtkStateFlags gtk_widget_get_state_flags ( GtkWidget* widget );
extern GtkStyleContext* gtk_widget_get_style_context ( GtkWidget* widget );
extern GObject* gtk_widget_get_template_child ( GtkWidget* widget, GType widget_type, const char* name );
extern const char* gtk_widget_get_tooltip_markup ( GtkWidget* widget );
extern const char* gtk_widget_get_tooltip_text ( GtkWidget* widget );
extern GtkAlign gtk_widget_get_valign ( GtkWidget* widget );
extern gboolean gtk_widget_get_vexpand ( GtkWidget* widget );
extern gboolean gtk_widget_get_vexpand_set ( GtkWidget* widget );
extern gboolean gtk_widget_get_visible ( GtkWidget* widget );
extern int gtk_widget_get_width ( GtkWidget* widget );
extern gboolean gtk_widget_grab_focus ( GtkWidget* widget );
extern gboolean gtk_widget_has_css_class ( GtkWidget* widget, const char* css_class );
extern gboolean gtk_widget_has_default ( GtkWidget* widget );
extern gboolean gtk_widget_has_focus ( GtkWidget* widget );
extern gboolean gtk_widget_has_visible_focus ( GtkWidget* widget );
extern void gtk_widget_hide ( GtkWidget* widget );
extern gboolean gtk_widget_in_destruction ( GtkWidget* widget );
extern void gtk_widget_init_template ( GtkWidget* widget );
extern void gtk_widget_insert_action_group ( GtkWidget* widget, const char* name, GActionGroup* group );
extern void gtk_widget_insert_after ( GtkWidget* widget, GtkWidget* parent, GtkWidget* previous_sibling );
extern void gtk_widget_insert_before ( GtkWidget* widget, GtkWidget* parent, GtkWidget* next_sibling );
extern gboolean gtk_widget_is_ancestor ( GtkWidget* widget, GtkWidget* ancestor );
extern gboolean gtk_widget_is_drawable ( GtkWidget* widget );
extern gboolean gtk_widget_is_focus ( GtkWidget* widget );
extern gboolean gtk_widget_is_sensitive ( GtkWidget* widget );
extern gboolean gtk_widget_is_visible ( GtkWidget* widget );
extern gboolean gtk_widget_keynav_failed ( GtkWidget* widget, GtkDirectionType direction );
extern GList* gtk_widget_list_mnemonic_labels ( GtkWidget* widget );
extern void gtk_widget_map ( GtkWidget* widget );
extern void gtk_widget_measure ( GtkWidget* widget, GtkOrientation orientation, int for_size, int* minimum, int* natural, int* minimum_baseline, int* natural_baseline );
extern gboolean gtk_widget_mnemonic_activate ( GtkWidget* widget, gboolean group_cycling );
extern GListModel* gtk_widget_observe_children ( GtkWidget* widget );
extern GListModel* gtk_widget_observe_controllers ( GtkWidget* widget );
extern GtkWidget* gtk_widget_pick ( GtkWidget* widget, double x, double y, GtkPickFlags flags );
extern void gtk_widget_queue_allocate ( GtkWidget* widget );
extern void gtk_widget_queue_draw ( GtkWidget* widget );
extern void gtk_widget_queue_resize ( GtkWidget* widget );
extern void gtk_widget_realize ( GtkWidget* widget );
extern void gtk_widget_remove_controller ( GtkWidget* widget, GtkEventController* controller );
extern void gtk_widget_remove_css_class ( GtkWidget* widget, const char* css_class );
extern void gtk_widget_remove_mnemonic_label ( GtkWidget* widget, GtkWidget* label );
extern void gtk_widget_remove_tick_callback ( GtkWidget* widget, guint id );
extern void gtk_widget_set_can_focus ( GtkWidget* widget, gboolean can_focus );
extern void gtk_widget_set_can_target ( GtkWidget* widget, gboolean can_target );
extern void gtk_widget_set_child_visible ( GtkWidget* widget, gboolean child_visible );
extern void gtk_widget_set_css_classes ( GtkWidget* widget, const char** classes );
extern void gtk_widget_set_cursor ( GtkWidget* widget, GdkCursor* cursor );
extern void gtk_widget_set_cursor_from_name ( GtkWidget* widget, const char* name );
extern void gtk_widget_set_direction ( GtkWidget* widget, GtkTextDirection dir );
extern void gtk_widget_set_focus_child ( GtkWidget* widget, GtkWidget* child );
extern void gtk_widget_set_focus_on_click ( GtkWidget* widget, gboolean focus_on_click );
extern void gtk_widget_set_focusable ( GtkWidget* widget, gboolean focusable );
extern void gtk_widget_set_font_map ( GtkWidget* widget, PangoFontMap* font_map );
extern void gtk_widget_set_halign ( GtkWidget* widget, GtkAlign align );
extern void gtk_widget_set_has_tooltip ( GtkWidget* widget, gboolean has_tooltip );
extern void gtk_widget_set_hexpand ( GtkWidget* widget, gboolean expand );
extern void gtk_widget_set_hexpand_set ( GtkWidget* widget, gboolean set );
extern void gtk_widget_set_layout_manager ( GtkWidget* widget, GtkLayoutManager* layout_manager );
extern void gtk_widget_set_margin_bottom ( GtkWidget* widget, int margin );
extern void gtk_widget_set_margin_end ( GtkWidget* widget, int margin );
extern void gtk_widget_set_margin_start ( GtkWidget* widget, int margin );
extern void gtk_widget_set_margin_top ( GtkWidget* widget, int margin );
extern void gtk_widget_set_name ( GtkWidget* widget, const char* name );
extern void gtk_widget_set_opacity ( GtkWidget* widget, double opacity );
extern void gtk_widget_set_overflow ( GtkWidget* widget, GtkOverflow overflow );
extern void gtk_widget_set_parent ( GtkWidget* widget, GtkWidget* parent );
extern void gtk_widget_set_receives_default ( GtkWidget* widget, gboolean receives_default );
extern void gtk_widget_set_sensitive ( GtkWidget* widget, gboolean sensitive );
extern void gtk_widget_set_size_request ( GtkWidget* widget, int width, int height );
extern void gtk_widget_set_state_flags ( GtkWidget* widget, GtkStateFlags flags, gboolean clear );
extern void gtk_widget_set_tooltip_markup ( GtkWidget* widget, const char* markup );
extern void gtk_widget_set_tooltip_text ( GtkWidget* widget, const char* text );
extern void gtk_widget_set_valign ( GtkWidget* widget, GtkAlign align );
extern void gtk_widget_set_vexpand ( GtkWidget* widget, gboolean expand );
extern void gtk_widget_set_vexpand_set ( GtkWidget* widget, gboolean set );
extern void gtk_widget_set_visible ( GtkWidget* widget, gboolean visible );
extern gboolean gtk_widget_should_layout ( GtkWidget* widget );
extern void gtk_widget_show ( GtkWidget* widget );
extern void gtk_widget_size_allocate ( GtkWidget* widget, const GtkAllocation* allocation, int baseline );
extern void gtk_widget_snapshot_child ( GtkWidget* widget, GtkWidget* child, GtkSnapshot* snapshot );
extern gboolean gtk_widget_translate_coordinates ( GtkWidget* src_widget, GtkWidget* dest_widget, double src_x, double src_y, double* dest_x, double* dest_y );
extern void gtk_widget_trigger_tooltip_query ( GtkWidget* widget );
extern void gtk_widget_unmap ( GtkWidget* widget );
extern void gtk_widget_unparent ( GtkWidget* widget );
extern void gtk_widget_unrealize ( GtkWidget* widget );
extern void gtk_widget_unset_state_flags ( GtkWidget* widget, GtkStateFlags flags );
extern void gtk_widget_class_add_binding ( GtkWidgetClass* widget_class, guint keyval, GdkModifierType mods, GtkShortcutFunc callback, const char* format_string, ... );
extern void gtk_widget_class_add_binding_action ( GtkWidgetClass* widget_class, guint keyval, GdkModifierType mods, const char* action_name, const char* format_string, ... );
extern void gtk_widget_class_add_binding_signal ( GtkWidgetClass* widget_class, guint keyval, GdkModifierType mods, const char* signal, const char* format_string, ... );
extern void gtk_widget_class_add_shortcut ( GtkWidgetClass* widget_class, GtkShortcut* shortcut );
extern void gtk_widget_class_bind_template_callback_full ( GtkWidgetClass* widget_class, const char* callback_name, GCallback callback_symbol );
extern void gtk_widget_class_bind_template_child_full ( GtkWidgetClass* widget_class, const char* name, gboolean internal_child, gssize struct_offset );
extern GtkAccessibleRole gtk_widget_class_get_accessible_role ( GtkWidgetClass* widget_class );
extern guint gtk_widget_class_get_activate_signal ( GtkWidgetClass* widget_class );
extern const char* gtk_widget_class_get_css_name ( GtkWidgetClass* widget_class );
extern GType gtk_widget_class_get_layout_manager_type ( GtkWidgetClass* widget_class );
extern void gtk_widget_class_install_action ( GtkWidgetClass* widget_class, const char* action_name, const char* parameter_type, GtkWidgetActionActivateFunc activate );
extern void gtk_widget_class_install_property_action ( GtkWidgetClass* widget_class, const char* action_name, const char* property_name );
extern gboolean gtk_widget_class_query_action ( GtkWidgetClass* widget_class, guint index_, GType* owner, const char** action_name, const GVariantType** parameter_type, const char** property_name );
extern void gtk_widget_class_set_accessible_role ( GtkWidgetClass* widget_class, GtkAccessibleRole accessible_role );
extern void gtk_widget_class_set_activate_signal ( GtkWidgetClass* widget_class, guint signal_id );
extern void gtk_widget_class_set_activate_signal_from_name ( GtkWidgetClass* widget_class, const char* signal_name );
extern void gtk_widget_class_set_css_name ( GtkWidgetClass* widget_class, const char* name );
extern void gtk_widget_class_set_layout_manager_type ( GtkWidgetClass* widget_class, GType type );
extern void gtk_widget_class_set_template ( GtkWidgetClass* widget_class, GBytes* template_bytes );
extern void gtk_widget_class_set_template_from_resource ( GtkWidgetClass* widget_class, const char* resource_name );
extern void gtk_widget_class_set_template_scope ( GtkWidgetClass* widget_class, GtkBuilderScope* scope );
